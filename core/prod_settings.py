"""
    Production Django settings for Pulsifi project.

    Generated by 'django-admin startproject' using Django 4.1.3.
"""

from pathlib import Path

from django.core.exceptions import ImproperlyConfigured
from django.urls import reverse_lazy
from environ import Env

#Getting setting default values for some settings that are collected from the attached environment variables file (if they are not specified in the file, these default values will be used)
env = Env(
    ALLOWED_HOSTS=(list, ["pulsifi"]),
    ALLOWED_ORIGINS=(list, ["https://pulsifi.tech"]),
    ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS=(int, 1),
    AVATAR_GRAVATAR_DEFAULT=(str, "mp"),
    EMAIL_HOST=(str, "smtppro.zoho.eu"),  # noqa
    EMAIL_PORT=(int, 465),
    EMAIL_HOST_USER=(str, "no-reply@pulsifi.tech"),
    EMAIL_USE_SSL=(bool, True),
    MESSAGE_DISPLAY_LENGTH=(int, 15),
    FOLLOWER_COUNT_SCALING_FUNCTION=(str, "linear")
)

#Confirming that the supplied environment variable values for these settings are one of the valid choices
_AVATAR_GRAVATAR_DEFAULT_choices = ("404", "mp", "identicon", "monsterid", "wavatar", "retro", "robohash")  # noqa
if env("AVATAR_GRAVATAR_DEFAULT") not in _AVATAR_GRAVATAR_DEFAULT_choices:
    raise ImproperlyConfigured(f"AVATAR_GRAVATAR_DEFAULT must be one of {_AVATAR_GRAVATAR_DEFAULT_choices}")
_FOLLOWER_COUNT_SCALING_FUNCTION_choices = ("logarithmic", "linear", "quadratic", "linearithmic", "exponential", "factorial")
if env("FOLLOWER_COUNT_SCALING_FUNCTION") not in _FOLLOWER_COUNT_SCALING_FUNCTION_choices:
    raise ImproperlyConfigured(f"FOLLOWER_COUNT_SCALING_FUNCTION must be one of {_FOLLOWER_COUNT_SCALING_FUNCTION_choices}")


# Build paths inside the project like this: BASE_DIR / "subdir"
BASE_DIR = Path(__file__).resolve().parent.parent


#Adding additional (not manually specified) environment variables as settings values
Env.read_env(BASE_DIR / ".env")


# Namespace resolving settings - SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
ALLOWED_HOSTS = env("ALLOWED_HOSTS")
ALLOWED_ORIGINS = env("ALLOWED_ORIGINS")  # TODO: work out how to host site
CSRF_TRUSTED_ORIGINS = ALLOWED_ORIGINS.copy()
STATIC_ROOT = "/staticfiles/"
STATIC_URL = "static/"
MEDIA_ROOT = BASE_DIR / r"pulsifi\media"
MEDIA_URL = "media/"


# Default URL redirect settings (used for authentication)
LOGIN_URL = reverse_lazy("pulsifi:home")
LOGIN_REDIRECT_URL = reverse_lazy("pulsifi:feed")
LOGOUT_REDIRECT_URL = reverse_lazy("default")


# Authentication configuration settings (mainly for allauth & its associated packages)
ACCOUNT_AUTHENTICATION_METHOD = "username_email"
ACCOUNT_PRESERVE_USERNAME_CASING = False
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_USERNAME_MIN_LENGTH = 4
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = env("ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS")
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_FORMS = {"signup": "pulsifi.forms.SignupForm"}
AVATAR_GRAVATAR_DEFAULT = env("AVATAR_GRAVATAR_DEFAULT")
SOCIALACCOUNT_PROVIDERS = {  # noqa
    "google": {"SCOPE": ["email"]},
    "discord": {"SCOPE": ["email"]}
}


# Email settings to configure how Django should send emails
EMAIL_HOST = env("EMAIL_HOST")
EMAIL_PORT = env("EMAIL_PORT")
EMAIL_HOST_USER = env("EMAIL_HOST_USER")
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD")
EMAIL_USE_SSL = env("EMAIL_USE_SSL")


# Custom settings values (used to control functionality of the app)
MESSAGE_DISPLAY_LENGTH = env("MESSAGE_DISPLAY_LENGTH")
FOLLOWER_COUNT_SCALING_FUNCTION = env("FOLLOWER_COUNT_SCALING_FUNCTION")  # TODO: Add function for how delete time of pulses & replies scales with follower count (y=log_2(x+1), y=x, y=xlog_2(x+1), y=2^x-1, y=(x+1)!-1)


# Secret key that is used for important secret stuff (keep the one used in production a secret!)
SECRET_KEY = env("SECRET_KEY")


# Application definitions
INSTALLED_APPS = [
    "pulsifi.apps.PulsifiConfig",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",  # noqa
    "allauth.socialaccount.providers.discord",  # noqa
    "allauth.socialaccount.providers.facebook",  # noqa
    "allauth.socialaccount.providers.github",  # noqa
    "allauth.socialaccount.providers.google",  # noqa
    "allauth.socialaccount.providers.microsoft",  # noqa
    "allauth.socialaccount.providers.reddit",  # noqa
    "allauth.socialaccount.providers.stackexchange",  # noqa
    "django_otp",
    "django_otp.plugins.otp_totp",
    "django_otp.plugins.otp_static",
    "allauth_2fa",
    "avatar"
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django_otp.middleware.OTPMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth_2fa.middleware.AllauthTwoFactorMiddleware",
]

WSGI_APPLICATION = "core.wsgi.application"

ROOT_URLCONF = "core.urls"

SITE_ID = 1

ACCOUNT_ADAPTER = "allauth_2fa.adapter.OTPAdapter"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages"
            ]
        }
    }
]

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3"
    }
}

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend'
]

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"
    }
]


# Language & time settings
LANGUAGE_CODE = "en-gb"
TIME_ZONE = "Europe/London"
USE_I18N = True
USE_L10N = True
USE_TZ = True