# Generated by Django 4.1.7 on 2023-02-18 13:44

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import pulsifi.models.utils


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('pulsifi', '0018_alter_user_is_staff'),
    ]

    operations = [
        migrations.AlterField(
            model_name='pulse',
            name='_date_time_created',
            field=models.DateTimeField(auto_now=True, help_text='Datetime object representing the date & time that this object instance was created.', verbose_name='Creation Date & Time'),
        ),
        migrations.AlterField(
            model_name='pulse',
            name='disliked_by',
            field=models.ManyToManyField(blank=True, help_text='The set of :model:`pulsifi.user` instances that have disliked this content object instance.', related_name='disliked_%(class)s_set', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='pulse',
            name='liked_by',
            field=models.ManyToManyField(blank=True, help_text='The set of :model:`pulsifi.user` instances that have liked this content object instance.', related_name='liked_%(class)s_set', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='pulse',
            name='visible',
            field=models.BooleanField(default=True, help_text='Boolean flag to determine whether this object should be accessible to the website. Use this flag instead of deleting objects.', verbose_name='Is visible?'),
        ),
        migrations.AlterField(
            model_name='reply',
            name='_content_type',
            field=models.ForeignKey(help_text='Link to the content type of the replied_content instance (either :model:`pulsifi.pulse` or :model:`pulsifi.reply`).', limit_choices_to={'app_label': 'pulsifi', 'model__in': ('pulse', 'reply')}, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype', verbose_name='Replied Content Type'),
        ),
        migrations.AlterField(
            model_name='reply',
            name='_date_time_created',
            field=models.DateTimeField(auto_now=True, help_text='Datetime object representing the date & time that this object instance was created.', verbose_name='Creation Date & Time'),
        ),
        migrations.AlterField(
            model_name='reply',
            name='_object_id',
            field=models.PositiveIntegerField(help_text='ID number of the specific instance of the replied_content instance.', verbose_name='Replied Content ID'),
        ),
        migrations.AlterField(
            model_name='reply',
            name='disliked_by',
            field=models.ManyToManyField(blank=True, help_text='The set of :model:`pulsifi.user` instances that have disliked this content object instance.', related_name='disliked_%(class)s_set', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='reply',
            name='liked_by',
            field=models.ManyToManyField(blank=True, help_text='The set of :model:`pulsifi.user` instances that have liked this content object instance.', related_name='liked_%(class)s_set', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='reply',
            name='visible',
            field=models.BooleanField(default=True, help_text='Boolean flag to determine whether this object should be accessible to the website. Use this flag instead of deleting objects.', verbose_name='Is visible?'),
        ),
        migrations.AlterField(
            model_name='report',
            name='_content_type',
            field=models.ForeignKey(help_text='Link to the content type of the reported_object instance (either :model:`pulsifi.user`, :model:`pulsifi.pulse` or :model:`pulsifi.reply`).', limit_choices_to={'app_label': 'pulsifi', 'model__in': ['user', 'pulse', 'reply']}, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype', verbose_name='Reported Object Type'),
        ),
        migrations.AlterField(
            model_name='report',
            name='_date_time_created',
            field=models.DateTimeField(auto_now=True, help_text='Datetime object representing the date & time that this object instance was created.', verbose_name='Creation Date & Time'),
        ),
        migrations.AlterField(
            model_name='report',
            name='_object_id',
            field=models.PositiveIntegerField(help_text='ID number of the specific instance of the reported_object instance.', verbose_name='Reported Object ID'),
        ),
        migrations.AlterField(
            model_name='report',
            name='assigned_moderator',
            field=models.ForeignKey(default=pulsifi.models.utils.get_random_moderator_id, help_text='Link to the :model:`pulsifi.user` object instance (from the set of moderators) that has been assigned to moderate this report.', limit_choices_to={'groups__name': 'Moderators', 'is_active': True}, on_delete=django.db.models.deletion.CASCADE, related_name='moderator_assigned_report_set', to=settings.AUTH_USER_MODEL, verbose_name='Assigned Moderator'),
        ),
        migrations.AlterField(
            model_name='report',
            name='category',
            field=models.CharField(choices=[('SPM', 'Spam'), ('SEX', 'Nudity or sexual activity'), ('HAT', 'Hate speech or symbols'), ('VIO', 'Violence or dangerous organisations'), ('IGL', 'Sale of illegal or regulated goods'), ('BUL', 'Bullying or harassment'), ('INP', 'Intellectual property violation or impersonation'), ('INJ', 'Suicide or self-injury'), ('SCM', 'Scam or fraud'), ('FLS', 'False or misleading information')], help_text='The category code that gives an overview as to the reason for the report.', max_length=3, verbose_name='Category'),
        ),
        migrations.AlterField(
            model_name='report',
            name='reason',
            field=models.TextField(help_text="Longer textfield containing an detailed description of the reason for this report's existence.", verbose_name='Reason'),
        ),
        migrations.AlterField(
            model_name='report',
            name='reporter',
            field=models.ForeignKey(help_text='Link to the :model:`pulsifi.user` object instance that created this report.', on_delete=django.db.models.deletion.CASCADE, related_name='submitted_report_set', to=settings.AUTH_USER_MODEL, verbose_name='Reporter'),
        ),
        migrations.AlterField(
            model_name='report',
            name='status',
            field=models.CharField(choices=[('PR', 'In Progress'), ('RE', 'Rejected'), ('CM', 'Completed')], default='PR', help_text='The status code that outlines the current position within the moderation cycle that this report is within.', max_length=2, verbose_name='Status'),
        ),
        migrations.AlterField(
            model_name='user',
            name='bio',
            field=models.TextField(blank=True, help_text='Longer textfield containing an autobiographical description of this user.', max_length=200, verbose_name='Bio'),
        ),
        migrations.AlterField(
            model_name='user',
            name='following',
            field=models.ManyToManyField(blank=True, help_text='Set of other :model:`pulsifi.user` objects that this user is following.', related_name='followers', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='user',
            name='is_active',
            field=models.BooleanField(default=True, help_text='Boolean flag to determine whether this object should be accessible to the website. Use this flag instead of deleting objects.', verbose_name='Is visible?'),
        ),
        migrations.AlterField(
            model_name='user',
            name='is_staff',
            field=models.BooleanField(default=False, help_text='Boolean flag to indicate whether this user is a staff member, and thus can log into the admin site.', verbose_name='Is a staff member?'),
        ),
        migrations.AlterField(
            model_name='user',
            name='is_superuser',
            field=models.BooleanField(default=False, help_text='Boolean flag to provide a quick way to designate that this user has all permissions without explicitly assigning them.', verbose_name='Is a superuser?'),
        ),
        migrations.AlterField(
            model_name='user',
            name='verified',
            field=models.BooleanField(default=False, help_text='Boolean flag to indicate whether this user is a noteable person/organisation.', verbose_name='Is verified?'),
        ),
    ]
